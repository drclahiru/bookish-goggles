<ws> ::= " " | "\n" | "\r"
<ws0> ::= <ws>*
<character> ::= [a-z] | [A-Z] | [0-9] | <ws>
<identifier> ::= ([a-z] | "_")+ ([a-z] | [0-9] | "_")*
<bool> ::= "true" | "false"
<null> ::= "null"
<string> ::= "\"" <character>* "\""
<positive_number> ::= [0-9]+ | [0-9]+ "." [0-9]+
<number> ::= "-"? <positive_number>
<value_type> ::= <number> | <bool> | <string>
<expression> ::= <value_type> | <identifier> | <if_else> | <range> | <operator_expression>
<let_binding> ::= "let " <identifier> (" " <type>) " = " <expression> "\n"
<if_else> ::= "if " <expression> " {" <ws0> <expression> <ws0> (("} else {" <ws0> <expression> <ws0> "}") | ("} else " <if_else>))
<basic_type> ::= "String" | "Number" | "Bool"
<range_type> ::= "Range(" <basic_type> ")"
<lambda_type> ::= "(" (<basic_type> (", " <basic_type>)*)? ") -> " <basic_type>
<type> ::= <basic_type> | <range_type> | <lambda_type>
<cell_identifier> ::= [A-Z]+ [1-9] [0-9]*
<range> ::= <cell_identifier> ":" <cell_identifier>
<operator> ::= "+" | "-" | "*" | "/" | "%" | "&&" | "||" | "==" | "<" | "<=" | ">=" | ">"
<operator_expression> ::= (<expression> " " <operator> " " <expression>)
						| "(" <operator_expression> ")"
<lambda> ::= "(" (<identifier> (", " <identifier>)*)? ") {" <ws0> (<let_bindings> <ws0>)* <expression> <ws0> "}"
<range_binding> ::= <range> " = (" (<value_type> ("," " "* <value_type>)*)? ")"
<range_bindings> ::= (<range_binding> "\n"+)*
<let_bindings> ::= <let_binding> ("\n" <ws0> <let_binding>)*
<global_scope> ::= <ws0> <range_bindings> <ws0> <let_bindings> <ws0>
